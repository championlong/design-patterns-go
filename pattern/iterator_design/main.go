package main

/*
迭代器模式:
使用迭代器的意义：
	1.迭代器模式封装集合内部的复杂数据结构，开发者不需要了解如何遍历，直接使⽤容器提供的迭代器即可；
	2.迭代器模式将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更加单⼀；
	3.迭代器模式让添加新的遍历算法更加容易，更符合开闭原则。除此之外，因为迭代器都实现⾃相同的接⼝，在开发中，基于接⼝⽽⾮实现编程，替换迭代器也变得更加容易。
在遍历的同时增删集合元素会产生结果不可预期⾏为或者未决⾏为
解决方案：⼀种是遍历的时候不允许增删元素，另⼀种是增删元素之后让遍历报错。
	增加成员变量modCount，创建迭代器时赋值给expectedModCount，调用函数时判断是否相等。
支持快照功能：
	实现1：在迭代器类中定义⼀个成员变量snapshot来存储快照。每当创建迭代器的时候，都拷⻉⼀份容器中的元素到快照中，后续的遍历操作都基于这个迭代器⾃⼰持有的快照来进⾏。
	实现2：为每个元素保存两个时间戳，⼀个是添加时间戳addTimestamp，⼀个是删除时间戳delTimestamp。当元素被加⼊到集合中的时候，我们将addTimestamp设置为当前时间，将delTimestamp设置成最⼤⻓整型值。当元素被删除时，我们将delTimestamp更新为当前时间，表⽰已经被删除。
*/

func main() {

}
